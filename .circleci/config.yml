version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy bucket contents
          when: on_fail
          command: |
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            fi
      - slack/status

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - add_ssh_keys:
          fingerprints: ["c5:2f:eb:0b:88:b9:d5:4b:b9:89:93:96:b9:ce:dd:80"]
      - run:
          name: Get data from memstash
          when: on_fail
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory db_rollback.yml
      - slack/status

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/status

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/status

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
      - slack/status
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm i
            npm run test
      - slack/status

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/status

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/status

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=backend-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
            -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data ${PUBLIC_DNS} \
            https://api.memstash.io/values/public_dns
      - destroy-environment
      - slack/status  

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-environment    
      - slack/status
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c5:2f:eb:0b:88:b9:d5:4b:b9:89:93:96:b9:ce:dd:80"]
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - run:
          name: Configure using Ansible
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy.yml
      - revert-migrations
      - destroy-environment 
      - slack/status

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            if curl -s "http://${PUBLIC_DNS}:3030/api/status" | grep "error"
            then
              return 1
            else
              return 0
            fi
      - revert-migrations
      - destroy-environment 
      - slack/status

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update Cloudfront and Clean up
          command: |
            #export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output text)
            #echo OldWorkflowID=${OldWorkflowID}
            #export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            #echo STACKS=${STACKS}
            echo "Create/Update CloudFront"
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - destroy-environment
      - slack/status
            
workflows:
  frontend:
    jobs:
      - build-frontend:
          filters:
            branches:
              ignore: master
      - test-frontend:
          requires:
            - build-frontend
          filters:
            branches:
              ignore: master
      - scan-frontend:
          requires:
            - test-frontend
          filters:
            branches:
              ignore: master
  backend:
    jobs:
      - build-backend:
          filters:
            branches:
              ignore: master
      - test-backend:
          requires:
            - build-backend
          filters:
            branches:
              ignore: master
      - scan-backend:
          requires:
            - test-backend
          filters:
            branches:
              ignore: master
  deploy:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: master
      - deploy-backend:
          requires:
            - deploy-infrastructure
          filters:
            branches:
              only: master
      - deploy-frontend:
          requires:
            - deploy-backend
          filters:
            branches:
              only: master
      - smoke-test:
          requires:
            - deploy-frontend
          filters:
            branches:
              only: master
      - cloudfront-update:
          requires:
            - smoke-test
          filters:
            branches:
              only: master
      